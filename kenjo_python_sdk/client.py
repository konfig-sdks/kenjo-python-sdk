# coding: utf-8
"""
    Kenjo API

    Before starting to use the Kenjo API, you have to request the API activation for a sandbox or production environment to the Kenjo Customer Success team. After that, an admin user has to go to *Settings > Integrations > API keys*, to generate the **API Key**. Follow the steps described in the **Autentication section** of this document. <br>The API key is needed to request the bearer token. Each endpoint callout requires a valid bearer token in the Authorization header. Once the token is retrieved, it will be useful during the time limit indicated by the 'expiration date'.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

import typing
import inspect
from datetime import date, datetime
from kenjo_python_sdk.client_custom import ClientCustom
from kenjo_python_sdk.configuration import Configuration
from kenjo_python_sdk.api_client import ApiClient
from kenjo_python_sdk.type_util import copy_signature
from kenjo_python_sdk.apis.tags.areas_api import AreasApi
from kenjo_python_sdk.apis.tags.attendance_api import AttendanceApi
from kenjo_python_sdk.apis.tags.authentication_api import AuthenticationApi
from kenjo_python_sdk.apis.tags.calendars_api import CalendarsApi
from kenjo_python_sdk.apis.tags.companies_api import CompaniesApi
from kenjo_python_sdk.apis.tags.compensation_api import CompensationApi
from kenjo_python_sdk.apis.tags.custom_fields_api import CustomFieldsApi
from kenjo_python_sdk.apis.tags.departments_api import DepartmentsApi
from kenjo_python_sdk.apis.tags.employees_api import EmployeesApi
from kenjo_python_sdk.apis.tags.offices_api import OfficesApi
from kenjo_python_sdk.apis.tags.teams_api import TeamsApi
from kenjo_python_sdk.apis.tags.time_off_api import TimeOffApi
from kenjo_python_sdk.apis.tags.user_accounts_api import UserAccountsApi



class Kenjo(ClientCustom):

    def __init__(self, configuration: typing.Union[Configuration, None] = None, **kwargs):
        super().__init__(configuration, **kwargs)
        if (len(kwargs) > 0):
            configuration = Configuration(**kwargs)
        if (configuration is None):
            raise Exception("configuration is required")
        api_client = ApiClient(configuration)
        self.areas: AreasApi = AreasApi(api_client)
        self.attendance: AttendanceApi = AttendanceApi(api_client)
        self.authentication: AuthenticationApi = AuthenticationApi(api_client)
        self.calendars: CalendarsApi = CalendarsApi(api_client)
        self.companies: CompaniesApi = CompaniesApi(api_client)
        self.compensation: CompensationApi = CompensationApi(api_client)
        self.custom_fields: CustomFieldsApi = CustomFieldsApi(api_client)
        self.departments: DepartmentsApi = DepartmentsApi(api_client)
        self.employees: EmployeesApi = EmployeesApi(api_client)
        self.offices: OfficesApi = OfficesApi(api_client)
        self.teams: TeamsApi = TeamsApi(api_client)
        self.time_off: TimeOffApi = TimeOffApi(api_client)
        self.user_accounts: UserAccountsApi = UserAccountsApi(api_client)
