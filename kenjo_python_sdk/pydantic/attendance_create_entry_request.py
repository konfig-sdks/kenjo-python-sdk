# coding: utf-8

"""
    Kenjo API

    Before starting to use the Kenjo API, you have to request the API activation for a sandbox or production environment to the Kenjo Customer Success team. After that, an admin user has to go to *Settings > Integrations > API keys*, to generate the **API Key**. Follow the steps described in the **Autentication section** of this document. <br>The API key is needed to request the bearer token. Each endpoint callout requires a valid bearer token in the Authorization header. Once the token is retrieved, it will be useful during the time limit indicated by the 'expiration date'.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from kenjo_python_sdk.pydantic.attendance_create_entry_request_breaks import AttendanceCreateEntryRequestBreaks

class AttendanceCreateEntryRequest(BaseModel):
    # The date of the entry. The valid format is *YYYY-MM-DD*. Required field.
    date: str = Field(alias='date')

    # The start time of the entry. The valid format is *hh:mm:ss*. Required field.
    start_time: str = Field(alias='startTime')

    # The Kenjo employee *_id*.
    user_id: typing.Optional[str] = Field(None, alias='userId')

    # The Kenjo *email* for an employee.
    email: typing.Optional[str] = Field(None, alias='email')

    # The *external id* for an employee for integrations.
    external_id: typing.Optional[str] = Field(None, alias='externalId')

    # The end time of the entry. It is not a required field but cannot be less or equal than the *startTime*. The valid format is *hh:mm:ss*
    end_time: typing.Optional[str] = Field(None, alias='endTime')

    breaks: typing.Optional[AttendanceCreateEntryRequestBreaks] = Field(None, alias='breaks')

    # Optional text to describe an attendance record (pair of startTime and endTime). The maximum number of characters is 150.
    comment: typing.Optional[str] = Field(None, alias='comment')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
