# coding: utf-8

"""
    Kenjo API

    Before starting to use the Kenjo API, you have to request the API activation for a sandbox or production environment to the Kenjo Customer Success team. After that, an admin user has to go to *Settings > Integrations > API keys*, to generate the **API Key**. Follow the steps described in the **Autentication section** of this document. <br>The API key is needed to request the bearer token. Each endpoint callout requires a valid bearer token in the Authorization header. Once the token is retrieved, it will be useful during the time limit indicated by the 'expiration date'.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from kenjo_python_sdk.pydantic.employees_create_inactive_employee_request_account import EmployeesCreateInactiveEmployeeRequestAccount
from kenjo_python_sdk.pydantic.employees_create_inactive_employee_request_address import EmployeesCreateInactiveEmployeeRequestAddress
from kenjo_python_sdk.pydantic.employees_create_inactive_employee_request_financial import EmployeesCreateInactiveEmployeeRequestFinancial
from kenjo_python_sdk.pydantic.employees_create_inactive_employee_request_home import EmployeesCreateInactiveEmployeeRequestHome
from kenjo_python_sdk.pydantic.employees_create_inactive_employee_request_personal import EmployeesCreateInactiveEmployeeRequestPersonal
from kenjo_python_sdk.pydantic.employees_create_inactive_employee_request_work import EmployeesCreateInactiveEmployeeRequestWork
from kenjo_python_sdk.pydantic.employees_create_inactive_employee_request_work_schedule import EmployeesCreateInactiveEmployeeRequestWorkSchedule

class EmployeesCreateInactiveEmployeeRequest(BaseModel):
    account: typing.Optional[EmployeesCreateInactiveEmployeeRequestAccount] = Field(None, alias='account')

    personal: typing.Optional[EmployeesCreateInactiveEmployeeRequestPersonal] = Field(None, alias='personal')

    work: typing.Optional[EmployeesCreateInactiveEmployeeRequestWork] = Field(None, alias='work')

    work_schedule: typing.Optional[EmployeesCreateInactiveEmployeeRequestWorkSchedule] = Field(None, alias='workSchedule')

    address: typing.Optional[EmployeesCreateInactiveEmployeeRequestAddress] = Field(None, alias='address')

    financial: typing.Optional[EmployeesCreateInactiveEmployeeRequestFinancial] = Field(None, alias='financial')

    home: typing.Optional[EmployeesCreateInactiveEmployeeRequestHome] = Field(None, alias='home')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
