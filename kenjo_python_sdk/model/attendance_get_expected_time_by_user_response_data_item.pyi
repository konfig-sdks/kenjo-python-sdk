# coding: utf-8

"""
    Kenjo API

    Before starting to use the Kenjo API, you have to request the API activation for a sandbox or production environment to the Kenjo Customer Success team. After that, an admin user has to go to *Settings > Integrations > API keys*, to generate the **API Key**. Follow the steps described in the **Autentication section** of this document. <br>The API key is needed to request the bearer token. Each endpoint callout requires a valid bearer token in the Authorization header. Once the token is retrieved, it will be useful during the time limit indicated by the 'expiration date'.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from kenjo_python_sdk import schemas  # noqa: F401


class AttendanceGetExpectedTimeByUserResponseDataItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            userId = schemas.StrSchema
        
            @staticmethod
            def days() -> typing.Type['AttendanceGetExpectedTimeByUserResponseDataItemDays']:
                return AttendanceGetExpectedTimeByUserResponseDataItemDays
            totalExpectedHours = schemas.NumberSchema
            totalExpectedMinutes = schemas.NumberSchema
            __annotations__ = {
                "userId": userId,
                "days": days,
                "totalExpectedHours": totalExpectedHours,
                "totalExpectedMinutes": totalExpectedMinutes,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userId"]) -> MetaOapg.properties.userId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["days"]) -> 'AttendanceGetExpectedTimeByUserResponseDataItemDays': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalExpectedHours"]) -> MetaOapg.properties.totalExpectedHours: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalExpectedMinutes"]) -> MetaOapg.properties.totalExpectedMinutes: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["userId", "days", "totalExpectedHours", "totalExpectedMinutes", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userId"]) -> typing.Union[MetaOapg.properties.userId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["days"]) -> typing.Union['AttendanceGetExpectedTimeByUserResponseDataItemDays', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalExpectedHours"]) -> typing.Union[MetaOapg.properties.totalExpectedHours, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalExpectedMinutes"]) -> typing.Union[MetaOapg.properties.totalExpectedMinutes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["userId", "days", "totalExpectedHours", "totalExpectedMinutes", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        userId: typing.Union[MetaOapg.properties.userId, str, schemas.Unset] = schemas.unset,
        days: typing.Union['AttendanceGetExpectedTimeByUserResponseDataItemDays', schemas.Unset] = schemas.unset,
        totalExpectedHours: typing.Union[MetaOapg.properties.totalExpectedHours, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        totalExpectedMinutes: typing.Union[MetaOapg.properties.totalExpectedMinutes, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AttendanceGetExpectedTimeByUserResponseDataItem':
        return super().__new__(
            cls,
            *args,
            userId=userId,
            days=days,
            totalExpectedHours=totalExpectedHours,
            totalExpectedMinutes=totalExpectedMinutes,
            _configuration=_configuration,
            **kwargs,
        )

from kenjo_python_sdk.model.attendance_get_expected_time_by_user_response_data_item_days import AttendanceGetExpectedTimeByUserResponseDataItemDays
