# coding: utf-8

"""
    Kenjo API

    Before starting to use the Kenjo API, you have to request the API activation for a sandbox or production environment to the Kenjo Customer Success team. After that, an admin user has to go to *Settings > Integrations > API keys*, to generate the **API Key**. Follow the steps described in the **Autentication section** of this document. <br>The API key is needed to request the bearer token. Each endpoint callout requires a valid bearer token in the Authorization header. Once the token is retrieved, it will be useful during the time limit indicated by the 'expiration date'.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from kenjo_python_sdk import schemas  # noqa: F401


class EmployeesCreateInactiveEmployeeRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def account() -> typing.Type['EmployeesCreateInactiveEmployeeRequestAccount']:
                return EmployeesCreateInactiveEmployeeRequestAccount
        
            @staticmethod
            def personal() -> typing.Type['EmployeesCreateInactiveEmployeeRequestPersonal']:
                return EmployeesCreateInactiveEmployeeRequestPersonal
        
            @staticmethod
            def work() -> typing.Type['EmployeesCreateInactiveEmployeeRequestWork']:
                return EmployeesCreateInactiveEmployeeRequestWork
        
            @staticmethod
            def workSchedule() -> typing.Type['EmployeesCreateInactiveEmployeeRequestWorkSchedule']:
                return EmployeesCreateInactiveEmployeeRequestWorkSchedule
        
            @staticmethod
            def address() -> typing.Type['EmployeesCreateInactiveEmployeeRequestAddress']:
                return EmployeesCreateInactiveEmployeeRequestAddress
        
            @staticmethod
            def financial() -> typing.Type['EmployeesCreateInactiveEmployeeRequestFinancial']:
                return EmployeesCreateInactiveEmployeeRequestFinancial
        
            @staticmethod
            def home() -> typing.Type['EmployeesCreateInactiveEmployeeRequestHome']:
                return EmployeesCreateInactiveEmployeeRequestHome
            __annotations__ = {
                "account": account,
                "personal": personal,
                "work": work,
                "workSchedule": workSchedule,
                "address": address,
                "financial": financial,
                "home": home,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account"]) -> 'EmployeesCreateInactiveEmployeeRequestAccount': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["personal"]) -> 'EmployeesCreateInactiveEmployeeRequestPersonal': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["work"]) -> 'EmployeesCreateInactiveEmployeeRequestWork': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workSchedule"]) -> 'EmployeesCreateInactiveEmployeeRequestWorkSchedule': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address"]) -> 'EmployeesCreateInactiveEmployeeRequestAddress': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["financial"]) -> 'EmployeesCreateInactiveEmployeeRequestFinancial': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["home"]) -> 'EmployeesCreateInactiveEmployeeRequestHome': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["account", "personal", "work", "workSchedule", "address", "financial", "home", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account"]) -> typing.Union['EmployeesCreateInactiveEmployeeRequestAccount', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["personal"]) -> typing.Union['EmployeesCreateInactiveEmployeeRequestPersonal', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["work"]) -> typing.Union['EmployeesCreateInactiveEmployeeRequestWork', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workSchedule"]) -> typing.Union['EmployeesCreateInactiveEmployeeRequestWorkSchedule', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address"]) -> typing.Union['EmployeesCreateInactiveEmployeeRequestAddress', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["financial"]) -> typing.Union['EmployeesCreateInactiveEmployeeRequestFinancial', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["home"]) -> typing.Union['EmployeesCreateInactiveEmployeeRequestHome', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["account", "personal", "work", "workSchedule", "address", "financial", "home", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        account: typing.Union['EmployeesCreateInactiveEmployeeRequestAccount', schemas.Unset] = schemas.unset,
        personal: typing.Union['EmployeesCreateInactiveEmployeeRequestPersonal', schemas.Unset] = schemas.unset,
        work: typing.Union['EmployeesCreateInactiveEmployeeRequestWork', schemas.Unset] = schemas.unset,
        workSchedule: typing.Union['EmployeesCreateInactiveEmployeeRequestWorkSchedule', schemas.Unset] = schemas.unset,
        address: typing.Union['EmployeesCreateInactiveEmployeeRequestAddress', schemas.Unset] = schemas.unset,
        financial: typing.Union['EmployeesCreateInactiveEmployeeRequestFinancial', schemas.Unset] = schemas.unset,
        home: typing.Union['EmployeesCreateInactiveEmployeeRequestHome', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EmployeesCreateInactiveEmployeeRequest':
        return super().__new__(
            cls,
            *args,
            account=account,
            personal=personal,
            work=work,
            workSchedule=workSchedule,
            address=address,
            financial=financial,
            home=home,
            _configuration=_configuration,
            **kwargs,
        )

from kenjo_python_sdk.model.employees_create_inactive_employee_request_account import EmployeesCreateInactiveEmployeeRequestAccount
from kenjo_python_sdk.model.employees_create_inactive_employee_request_address import EmployeesCreateInactiveEmployeeRequestAddress
from kenjo_python_sdk.model.employees_create_inactive_employee_request_financial import EmployeesCreateInactiveEmployeeRequestFinancial
from kenjo_python_sdk.model.employees_create_inactive_employee_request_home import EmployeesCreateInactiveEmployeeRequestHome
from kenjo_python_sdk.model.employees_create_inactive_employee_request_personal import EmployeesCreateInactiveEmployeeRequestPersonal
from kenjo_python_sdk.model.employees_create_inactive_employee_request_work import EmployeesCreateInactiveEmployeeRequestWork
from kenjo_python_sdk.model.employees_create_inactive_employee_request_work_schedule import EmployeesCreateInactiveEmployeeRequestWorkSchedule
