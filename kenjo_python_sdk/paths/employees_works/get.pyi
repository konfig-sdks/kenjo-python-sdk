# coding: utf-8

"""
    Kenjo API

    Before starting to use the Kenjo API, you have to request the API activation for a sandbox or production environment to the Kenjo Customer Success team. After that, an admin user has to go to *Settings > Integrations > API keys*, to generate the **API Key**. Follow the steps described in the **Autentication section** of this document. <br>The API key is needed to request the bearer token. Each endpoint callout requires a valid bearer token in the Authorization header. Once the token is retrieved, it will be useful during the time limit indicated by the 'expiration date'.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from kenjo_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from kenjo_python_sdk.api_response import AsyncGeneratorResponse
from kenjo_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from kenjo_python_sdk import schemas  # noqa: F401

from kenjo_python_sdk.model.employees_list_works_response import EmployeesListWorksResponse as EmployeesListWorksResponseSchema
from kenjo_python_sdk.model.authentication_create_bearer_token400_response import AuthenticationCreateBearerToken400Response as AuthenticationCreateBearerToken400ResponseSchema

from kenjo_python_sdk.type.employees_list_works_response import EmployeesListWorksResponse
from kenjo_python_sdk.type.authentication_create_bearer_token400_response import AuthenticationCreateBearerToken400Response

from ...api_client import Dictionary
from kenjo_python_sdk.pydantic.authentication_create_bearer_token400_response import AuthenticationCreateBearerToken400Response as AuthenticationCreateBearerToken400ResponsePydantic
from kenjo_python_sdk.pydantic.employees_list_works_response import EmployeesListWorksResponse as EmployeesListWorksResponsePydantic

# Query params
CompanyIdSchema = schemas.StrSchema
OfficeIdSchema = schemas.StrSchema
DepartmentIdSchema = schemas.StrSchema
StartDateSchema = schemas.StrSchema
JobTitleSchema = schemas.StrSchema
WorkPhoneSchema = schemas.StrSchema
WorkMobileSchema = schemas.StrSchema
IsAssistantSchema = schemas.BoolSchema
ProbationPeriodEndSchema = schemas.StrSchema
ReportsToIdSchema = schemas.StrSchema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'companyId': typing.Union[CompanyIdSchema, str, ],
        'officeId': typing.Union[OfficeIdSchema, str, ],
        'departmentId': typing.Union[DepartmentIdSchema, str, ],
        'startDate': typing.Union[StartDateSchema, str, ],
        'jobTitle': typing.Union[JobTitleSchema, str, ],
        'workPhone': typing.Union[WorkPhoneSchema, str, ],
        'workMobile': typing.Union[WorkMobileSchema, str, ],
        'isAssistant': typing.Union[IsAssistantSchema, bool, ],
        'probationPeriodEnd': typing.Union[ProbationPeriodEndSchema, str, ],
        'reportsToId': typing.Union[ReportsToIdSchema, str, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_company_id = api_client.QueryParameter(
    name="companyId",
    style=api_client.ParameterStyle.FORM,
    schema=CompanyIdSchema,
    explode=True,
)
request_query_office_id = api_client.QueryParameter(
    name="officeId",
    style=api_client.ParameterStyle.FORM,
    schema=OfficeIdSchema,
    explode=True,
)
request_query_department_id = api_client.QueryParameter(
    name="departmentId",
    style=api_client.ParameterStyle.FORM,
    schema=DepartmentIdSchema,
    explode=True,
)
request_query_start_date = api_client.QueryParameter(
    name="startDate",
    style=api_client.ParameterStyle.FORM,
    schema=StartDateSchema,
    explode=True,
)
request_query_job_title = api_client.QueryParameter(
    name="jobTitle",
    style=api_client.ParameterStyle.FORM,
    schema=JobTitleSchema,
    explode=True,
)
request_query_work_phone = api_client.QueryParameter(
    name="workPhone",
    style=api_client.ParameterStyle.FORM,
    schema=WorkPhoneSchema,
    explode=True,
)
request_query_work_mobile = api_client.QueryParameter(
    name="workMobile",
    style=api_client.ParameterStyle.FORM,
    schema=WorkMobileSchema,
    explode=True,
)
request_query_is_assistant = api_client.QueryParameter(
    name="isAssistant",
    style=api_client.ParameterStyle.FORM,
    schema=IsAssistantSchema,
    explode=True,
)
request_query_probation_period_end = api_client.QueryParameter(
    name="probationPeriodEnd",
    style=api_client.ParameterStyle.FORM,
    schema=ProbationPeriodEndSchema,
    explode=True,
)
request_query_reports_to_id = api_client.QueryParameter(
    name="reportsToId",
    style=api_client.ParameterStyle.FORM,
    schema=ReportsToIdSchema,
    explode=True,
)
# Header params
AuthorizationSchema = schemas.StrSchema
RequestRequiredHeaderParams = typing_extensions.TypedDict(
    'RequestRequiredHeaderParams',
    {
        'Authorization': typing.Union[AuthorizationSchema, str, ],
    }
)
RequestOptionalHeaderParams = typing_extensions.TypedDict(
    'RequestOptionalHeaderParams',
    {
    },
    total=False
)


class RequestHeaderParams(RequestRequiredHeaderParams, RequestOptionalHeaderParams):
    pass


request_header_authorization = api_client.HeaderParameter(
    name="Authorization",
    style=api_client.ParameterStyle.SIMPLE,
    schema=AuthorizationSchema,
    required=True,
)
SchemaFor200ResponseBodyApplicationJson = EmployeesListWorksResponseSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: EmployeesListWorksResponse


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: EmployeesListWorksResponse


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)
SchemaFor400ResponseBodyApplicationJson = AuthenticationCreateBearerToken400ResponseSchema


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    body: AuthenticationCreateBearerToken400Response


@dataclass
class ApiResponseFor400Async(api_client.AsyncApiResponse):
    body: AuthenticationCreateBearerToken400Response


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    response_cls_async=ApiResponseFor400Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationJson),
    },
)


@dataclass
class ApiResponseFor401(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor401Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_401 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor401,
    response_cls_async=ApiResponseFor401Async,
)
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _list_works_mapped_args(
        self,
        authorization: str,
        company_id: typing.Optional[str] = None,
        office_id: typing.Optional[str] = None,
        department_id: typing.Optional[str] = None,
        start_date: typing.Optional[str] = None,
        job_title: typing.Optional[str] = None,
        work_phone: typing.Optional[str] = None,
        work_mobile: typing.Optional[str] = None,
        is_assistant: typing.Optional[bool] = None,
        probation_period_end: typing.Optional[str] = None,
        reports_to_id: typing.Optional[str] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _query_params = {}
        _header_params = {}
        if company_id is not None:
            _query_params["companyId"] = company_id
        if office_id is not None:
            _query_params["officeId"] = office_id
        if department_id is not None:
            _query_params["departmentId"] = department_id
        if start_date is not None:
            _query_params["startDate"] = start_date
        if job_title is not None:
            _query_params["jobTitle"] = job_title
        if work_phone is not None:
            _query_params["workPhone"] = work_phone
        if work_mobile is not None:
            _query_params["workMobile"] = work_mobile
        if is_assistant is not None:
            _query_params["isAssistant"] = is_assistant
        if probation_period_end is not None:
            _query_params["probationPeriodEnd"] = probation_period_end
        if reports_to_id is not None:
            _query_params["reportsToId"] = reports_to_id
        if authorization is not None:
            _header_params["Authorization"] = authorization
        args.query = _query_params
        args.header = _header_params
        return args

    async def _alist_works_oapg(
        self,
            query_params: typing.Optional[dict] = {},
            header_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestHeaderParams, header_params)
        used_path = path.value
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_company_id,
            request_query_office_id,
            request_query_department_id,
            request_query_start_date,
            request_query_job_title,
            request_query_work_phone,
            request_query_work_mobile,
            request_query_is_assistant,
            request_query_probation_period_end,
            request_query_reports_to_id,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        for parameter in (
            request_header_authorization,
        ):
            parameter_data = header_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _headers.extend(serialized_data)
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/employees/works',
            headers=_headers,
        )
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _list_works_oapg(
        self,
            query_params: typing.Optional[dict] = {},
            header_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestHeaderParams, header_params)
        used_path = path.value
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_company_id,
            request_query_office_id,
            request_query_department_id,
            request_query_start_date,
            request_query_job_title,
            request_query_work_phone,
            request_query_work_mobile,
            request_query_is_assistant,
            request_query_probation_period_end,
            request_query_reports_to_id,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        for parameter in (
            request_header_authorization,
        ):
            parameter_data = header_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _headers.extend(serialized_data)
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/employees/works',
            headers=_headers,
        )
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class ListWorksRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def alist_works(
        self,
        authorization: str,
        company_id: typing.Optional[str] = None,
        office_id: typing.Optional[str] = None,
        department_id: typing.Optional[str] = None,
        start_date: typing.Optional[str] = None,
        job_title: typing.Optional[str] = None,
        work_phone: typing.Optional[str] = None,
        work_mobile: typing.Optional[str] = None,
        is_assistant: typing.Optional[bool] = None,
        probation_period_end: typing.Optional[str] = None,
        reports_to_id: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._list_works_mapped_args(
            authorization=authorization,
            company_id=company_id,
            office_id=office_id,
            department_id=department_id,
            start_date=start_date,
            job_title=job_title,
            work_phone=work_phone,
            work_mobile=work_mobile,
            is_assistant=is_assistant,
            probation_period_end=probation_period_end,
            reports_to_id=reports_to_id,
        )
        return await self._alist_works_oapg(
            query_params=args.query,
            header_params=args.header,
            **kwargs,
        )
    
    def list_works(
        self,
        authorization: str,
        company_id: typing.Optional[str] = None,
        office_id: typing.Optional[str] = None,
        department_id: typing.Optional[str] = None,
        start_date: typing.Optional[str] = None,
        job_title: typing.Optional[str] = None,
        work_phone: typing.Optional[str] = None,
        work_mobile: typing.Optional[str] = None,
        is_assistant: typing.Optional[bool] = None,
        probation_period_end: typing.Optional[str] = None,
        reports_to_id: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._list_works_mapped_args(
            authorization=authorization,
            company_id=company_id,
            office_id=office_id,
            department_id=department_id,
            start_date=start_date,
            job_title=job_title,
            work_phone=work_phone,
            work_mobile=work_mobile,
            is_assistant=is_assistant,
            probation_period_end=probation_period_end,
            reports_to_id=reports_to_id,
        )
        return self._list_works_oapg(
            query_params=args.query,
            header_params=args.header,
        )

class ListWorks(BaseApi):

    async def alist_works(
        self,
        authorization: str,
        company_id: typing.Optional[str] = None,
        office_id: typing.Optional[str] = None,
        department_id: typing.Optional[str] = None,
        start_date: typing.Optional[str] = None,
        job_title: typing.Optional[str] = None,
        work_phone: typing.Optional[str] = None,
        work_mobile: typing.Optional[str] = None,
        is_assistant: typing.Optional[bool] = None,
        probation_period_end: typing.Optional[str] = None,
        reports_to_id: typing.Optional[str] = None,
        validate: bool = False,
        **kwargs,
    ) -> EmployeesListWorksResponsePydantic:
        raw_response = await self.raw.alist_works(
            authorization=authorization,
            company_id=company_id,
            office_id=office_id,
            department_id=department_id,
            start_date=start_date,
            job_title=job_title,
            work_phone=work_phone,
            work_mobile=work_mobile,
            is_assistant=is_assistant,
            probation_period_end=probation_period_end,
            reports_to_id=reports_to_id,
            **kwargs,
        )
        if validate:
            return EmployeesListWorksResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(EmployeesListWorksResponsePydantic, raw_response.body)
    
    
    def list_works(
        self,
        authorization: str,
        company_id: typing.Optional[str] = None,
        office_id: typing.Optional[str] = None,
        department_id: typing.Optional[str] = None,
        start_date: typing.Optional[str] = None,
        job_title: typing.Optional[str] = None,
        work_phone: typing.Optional[str] = None,
        work_mobile: typing.Optional[str] = None,
        is_assistant: typing.Optional[bool] = None,
        probation_period_end: typing.Optional[str] = None,
        reports_to_id: typing.Optional[str] = None,
        validate: bool = False,
    ) -> EmployeesListWorksResponsePydantic:
        raw_response = self.raw.list_works(
            authorization=authorization,
            company_id=company_id,
            office_id=office_id,
            department_id=department_id,
            start_date=start_date,
            job_title=job_title,
            work_phone=work_phone,
            work_mobile=work_mobile,
            is_assistant=is_assistant,
            probation_period_end=probation_period_end,
            reports_to_id=reports_to_id,
        )
        if validate:
            return EmployeesListWorksResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(EmployeesListWorksResponsePydantic, raw_response.body)


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def aget(
        self,
        authorization: str,
        company_id: typing.Optional[str] = None,
        office_id: typing.Optional[str] = None,
        department_id: typing.Optional[str] = None,
        start_date: typing.Optional[str] = None,
        job_title: typing.Optional[str] = None,
        work_phone: typing.Optional[str] = None,
        work_mobile: typing.Optional[str] = None,
        is_assistant: typing.Optional[bool] = None,
        probation_period_end: typing.Optional[str] = None,
        reports_to_id: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._list_works_mapped_args(
            authorization=authorization,
            company_id=company_id,
            office_id=office_id,
            department_id=department_id,
            start_date=start_date,
            job_title=job_title,
            work_phone=work_phone,
            work_mobile=work_mobile,
            is_assistant=is_assistant,
            probation_period_end=probation_period_end,
            reports_to_id=reports_to_id,
        )
        return await self._alist_works_oapg(
            query_params=args.query,
            header_params=args.header,
            **kwargs,
        )
    
    def get(
        self,
        authorization: str,
        company_id: typing.Optional[str] = None,
        office_id: typing.Optional[str] = None,
        department_id: typing.Optional[str] = None,
        start_date: typing.Optional[str] = None,
        job_title: typing.Optional[str] = None,
        work_phone: typing.Optional[str] = None,
        work_mobile: typing.Optional[str] = None,
        is_assistant: typing.Optional[bool] = None,
        probation_period_end: typing.Optional[str] = None,
        reports_to_id: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._list_works_mapped_args(
            authorization=authorization,
            company_id=company_id,
            office_id=office_id,
            department_id=department_id,
            start_date=start_date,
            job_title=job_title,
            work_phone=work_phone,
            work_mobile=work_mobile,
            is_assistant=is_assistant,
            probation_period_end=probation_period_end,
            reports_to_id=reports_to_id,
        )
        return self._list_works_oapg(
            query_params=args.query,
            header_params=args.header,
        )

